\hypertarget{my-first-babble-app-tutorial}{%
\section{My First Babble App
Tutorial}\label{my-first-babble-app-tutorial}}

This article is a walkthrough of the process of building your first
Android App using the \texttt{babble-android} library. We are working
towards the Sample App included in the \texttt{babble-android}
library\footnote{The sample app is part of the \texttt{babble-android}
  library and is available from the
  \href{https://github.com/mosaicnetworks/babble-android}{GitHub repo}}.

\hypertarget{babble}{%
\subsection{Babble}\label{babble}}

Babble enables multiple computers to behave as one. It uses Peer to Peer
(P2P) networking and a consensus algorithm to guarantee that a group of
connected computers process the same commands in the same order; a
technique known as state-machine replication. This makes for secure
systems that can tolerate arbitrary failures, including malicious
behaviour.

We use an adaptation of the Hashgraph consensus algorithm, invented by
Leemon Baird. Hashgraph is best described in the
\href{http://www.swirlds.com/downloads/SWIRLDS-TR-2016-01.pdf}{white-paper}
and its
\href{http://www.swirlds.com/downloads/SWIRLDS-TR-2016-02.pdf}{accompanying
document}. The original algorithm is protected by
\href{http://www.swirlds.com/ip/}{patents} in the USA. Therefore, anyone
intending to use this software in the USA should obtain a license from
the patent holders.

Hashgraph is based on the intuitive idea that gossiping about gossip
itself yields enough information to compute a consensus ordering of
events. It attains the theoretical limit of tolerating up to one-third
of faulty nodes without compromising on speed. For those familiar with
the jargon, it is a leaderless, asynchronous BFT consensus algorithm.

Babble projects the output of the consensus algorithm onto a linear
blockchain which is more suitable for representing an ordered list of
transactions and facilitates the creation of light-clients. For
information about this projection please refer to
\href{http://docs.babble.io/en/latest/blockchain.html}{documentation}
pages.

This blockchain mapping is also instrumental in two important features
that were alluded to in Baird's paper, but not implemented:

\begin{itemize}
\item
  A \href{http://docs.babble.io/en/latest/fastsync.html}{fast-sync}
  protocol which enables nodes to join a cluster without having to
  download the entire history of gossip.
\item
  A
  \href{http://docs.babble.io/en/latest/dynamic_membership.html}{dynamic
  membership} protocol, which enables peers to join or leave a cluster
  on demand.
\end{itemize}

\hypertarget{design}{%
\subsubsection{Design}\label{design}}

Babble is designed to integrate with applications written in any
programming language.

\hypertarget{overview}{%
\paragraph{Overview}\label{overview}}

\includegraphics{./screenshots/babble_design_2.png}

Almost any software application can be modelled in terms of a
\emph{service} and a \emph{state}. The \emph{service} is responsible for
processing commands (ex. user input), while the \emph{state} is
responsible for manipulating and storing the data (eg. database).
Usually, when commands need to update the data, the \emph{service} will
invoke the \emph{state} directly. In a distributed application, however,
commands (referred to as \emph{transactions} in this context), must be
broadcast to all replicas and consistently ordered before being applied
to the \emph{state}. This ensures that all replicas process the same
commands in the same order. Hence, the \emph{service} no longer
communicates directly with the \emph{state} (except for read-only
requests), but forwards commands to a \emph{transaction ordering system}
which takes care of broadcasting and ordering the transactions across
all replicas before feeding them back to the application's \emph{state}.

Babble is an ordering system that plugs into any application thanks to a
very simple interface. It uses a consensus algorithm, to replicate and
order the transactions, and a blockchain to represent the resulting
list. A blockchain is a linear data structure composed of batches of
transactions, hashed and signed together, easily allowing to verify any
transaction. So, instead of applying commands directly to the
\emph{state}, Babble applications must forward the commands to Babble
and let them be processed asynchronously by the consensus system before
receiving them back, in blocks, ready to be applied to the \emph{state}.

Note that it is left to the application layer to filter out bad
transactions before relaying them from clients to the consensus engine.
Unlike other middleware designed to sit in front of the application
(like Apache or Tendermint), the user-facing API is app-specific, and
Babble just takes care or managing the consensus ``under the hood''.
This filtering partially addresses spam from anonymous clients, but
doesn't protect against malicious nodes spamming the network; that is a
potential enhancement on the roadmap.

\hypertarget{api}{%
\paragraph{API}\label{api}}

Babble communicates with the App through an \texttt{AppProxy} interface,
which has two implementations:

\begin{itemize}
\item
  \texttt{SocketProxy}: A SocketProxy connects to an App via TCP
  sockets. It enables the application to run in a separate process or
  machine, and to be written in any programming language.
\item
  \texttt{InmemProxy} : An InmemProxy uses native callback handlers to
  integrate Babble as a regular Go dependency.
\end{itemize}

The \texttt{AppProxy} interface exposes three methods for Babble to call
the App:

\begin{itemize}
\tightlist
\item
  \texttt{CommitBlock(Block)\ (CommitResponse,\ error)}: Commits a block
  to the application and returns the resulting state-hash, with accepted
  internal transactions.
\item
  \texttt{GetSnapshot(int)\ ({[}{]}byte,\ error)}: Gets the application
  snapshot corresponding to a particular block index.
\item
  \texttt{Restore({[}{]}byte)\ error}: Restores the App state from a
  snapshot.
\end{itemize}

Reciprocally, \texttt{AppProxy} relays transactions from the App to
Babble via a native Go channel - \texttt{SubmitCh} - which ties into the
application differently depending on the type of proxy (Socket or
Inmem).

Babble asynchronously processes transactions and eventually feeds them
back to the App, in consensus order and bundled into blocks, with a
\textbf{CommitBlock} call. Transactions are just raw bytes and Babble
does not need to know what they represent. Therefore, encoding and
decoding transactions is done by the App.

\pagebreak

\hypertarget{prerequisites}{%
\subsection{Prerequisites}\label{prerequisites}}

We will assume that you have installed Android Studio, an Android SDK
with API version 29 and Android NDK. Android API 29 (10.0 / Q) is
assumed, if use a previous version the create activity items in these
instructions will use AppCompat instead of AndroidX\footnote{You can
  read more about AndroidX here:
  \url{https://android-developers.googleblog.com/2018/05/hello-world-androidx.html}},
leading to incompatibilities with the pasted source code. The babble
node itself is compatible with AppCompat, but converting the sample to
use AppCompat is beyond the scope of this article.

This tutorial is going to assume deployment to a physical Android
device. Thus you will need an Android device (minimum API version
19\footnote{API version 19 is Android 4.4 (KitKat). In May 3.8\% of
  devices were using version 18 or lower. Android 4.4 was released in
  2013. Whilst it would be possible to code support for earlier
  versions, the existing code uses Android features introduced in
  Android 4.4.}) with the developer options turned on, debugging
enabled, and a suitable USB cable. You could use the android emulator,
but that is beyond the scope of this article.

\pagebreak

\hypertarget{our-first-minimal-app}{%
\subsection{Our First Minimal App}\label{our-first-minimal-app}}

First up we will create a minimal app to test our environment and prove
that we have loaded the \texttt{babble-android} library correctly. Fire
up Android Studio and select \texttt{File/New\ Project}. You are asked
to choose a project template.

\includegraphics[width=0.8\textwidth,height=\textheight]{./screenshots/create_new_project.png}

Choose \emph{Empty Activity} from the \emph{Phone and Tablet} tab, and
click Next.

\includegraphics[width=0.6\textwidth,height=\textheight]{./screenshots/new_project_options.png}

The options here should be self-explanatory. We would recommend not
using spaces in the Package Name or the Save Location. Do not set the
Minimum API Level below 19. Click Finish.

\includegraphics{./screenshots/empty_android_studio.png}

Android Studio will open, and after expanding some of the menus it will
look something like above.

\emph{N.B. the screen will change a few seconds after opening when the
initial gradle scripts complete. The status bar at the bottom of the
window should tell you this is happening.}

\pagebreak

\hypertarget{running-the-app}{%
\subsubsection{Running the App}\label{running-the-app}}

Connect your android device to your computer via a USB cable. First we
will test that the Android Debug Bridge (\textbf{adb}) can see the
device.

\begin{Shaded}
\begin{Highlighting}[]
\ExtensionTok{jon@hpjon}\NormalTok{:~/Android/MyFirstApp$ adb devices}
\ExtensionTok{List}\NormalTok{ of devices attached}
\ExtensionTok{4JPNU18709118621}\NormalTok{    device}
\ExtensionTok{jon@hpjon}\NormalTok{:~/Android/MyFirstApp$ }
\end{Highlighting}
\end{Shaded}

The command \texttt{adb\ kill-server} will reset this connection.

If you can see a device listed, go back to Android Studio. and in the
top right is a target device dropdown. Select your device from the list.

\includegraphics{./screenshots/device_selection.png}

If you cannot find your device in the list, the
\texttt{Troubleshoot\ device\ connections} option on that menu should
help.

Then press that little green triangle to the right of the dropdown
device menu. Gradle then builds the app, which is then installed onto
the physical android device that you selected. The whole process tool
about 20 seconds on my laptop (feel free to buy me a quicker one).

\includegraphics[width=0.5\textwidth,height=\textheight]{./screenshots/mobile_step_1.png}
\includegraphics[width=0.25\textwidth,height=\textheight]{./screenshots/default_icon.png}

If you look on the device, you should find the app installed, as on the
right above.

Congratulations, you have an app. Now onto Babble\ldots{}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\pagebreak

\hypertarget{our-first-babble-app}{%
\subsection{Our First Babble App}\label{our-first-babble-app}}

We will now integrate the \texttt{babble-android} library into our
skeleton app. We will use it to generate a key pair -- just to prove
that we have a working library instance.

\hypertarget{integrating-the-babble-android-library}{%
\subsubsection{Integrating the Babble-Android
Library}\label{integrating-the-babble-android-library}}

The library is hosted \textbf{jcenter}. To make it available, we need to
amend some gradle scripts.

\includegraphics[width=0.5\textwidth,height=\textheight]{./screenshots/gradle_scripts.png}

In Android Studio, double click on the Project \texttt{build.gradle} as
highlighted in the screenshot above.

We then add the 3 line \texttt{maven} instruction as below:

\begin{verbatim}
allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://dl.bintray.com/mosaicnetworks/maven'
        }
    }
} 
\end{verbatim}

Which leaves the entire file looking like this:

\begin{verbatim}
// Top-level build file where you can add configuration options common to all
// sub-projects/modules.

buildscript {
    repositories {
        google()
        jcenter()
        
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        maven {
            url 'https://dl.bintray.com/mosaicnetworks/maven'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
 
\end{verbatim}

Next we need to amend the app \texttt{build.gradle} (it is below the
Project \texttt{build.gradle} in the screenshot above. We add an
implementation line to the bottom dependencies section.

\begin{verbatim}
implementation 'io.mosaicnetworks:babble:0.1.0'
\end{verbatim}

This leaves us with this full file:

\begin{verbatim}
apply plugin: 'com.android.application'

android {
 compileSdkVersion 29
 buildToolsVersion "29.0.2"
 defaultConfig {
  applicationId "io.mosaicnetworks.myfirstapp"
  minSdkVersion 19
  targetSdkVersion 29
  versionCode 1
  versionName "1.0"
  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
}
buildTypes {
 release {
 minifyEnabled false
 proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
     'proguard-rules.pro'
  }
 }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation 'io.mosaicnetworks:babble:0.2.1'
  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'androidx.test.ext:junit:1.1.1'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
\end{verbatim}

\includegraphics{./screenshots/sync_message.png}

When you get a message like the above, click the \texttt{Sync\ Now} link
on the right of the message.

\hypertarget{using-the-library}{%
\subsubsection{Using the Library}\label{using-the-library}}

The library should now be included in the project. So lets use it! Open
\texttt{MainActivity.java} as below:

\includegraphics{./screenshots/main_activity.png}

Add the lines below underneath the last import statement. The lines will
appear greyed out, as the import is not yet used. As well as babble we
are importing the \texttt{Log} package to write to the Android logs.

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.KeyPair;}
\KeywordTok{import}\ImportTok{ android.util.Log;}
\end{Highlighting}
\end{Shaded}

Add the following lines as the last line of the \texttt{onCreate}
function

\begin{Shaded}
\begin{Highlighting}[]
\BuiltInTok{KeyPair}\NormalTok{ kp = }\KeywordTok{new} \BuiltInTok{KeyPair}\NormalTok{();}
\NormalTok{Log.}\FunctionTok{i}\NormalTok{(}\StringTok{"Yippee"}\NormalTok{,kp.}\FunctionTok{privateKey}\NormalTok{);}
\end{Highlighting}
\end{Shaded}

This code generates a key pair and writes the private code to the logs.

Save all the files and run your app.

\includegraphics{./screenshots/logcat.png}

The app looks exactly as per the previous iteration, so lets take a look
under the hood. Press logcat, as highlighted in gray in the screenshot
above. Then type \texttt{yippee} in the search box at the top of that
window to filter the logs. You should have a freshly generated private
key in there.

This project at this stage is available from github from
\href{https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage1}{here}
\footnote{This code is the stage1 branch at
  https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage1}

The downloadable version of the project has mosaic network icons, rather
than the default android ones. You can customise the icons using
\href{https://developer.android.com/studio/write/image-asset-studio}{Android
Studio Image Asset Studio}.\footnote{\href{https://developer.android.com/studio/write/image-asset-studio}{Android
  Studio Image Asset Studio} is described here:
  https://developer.android.com/studio/write/image-asset-studio}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\pagebreak

\hypertarget{our-first-babble-blockchain}{%
\subsection{Our First Babble
Blockchain}\label{our-first-babble-blockchain}}

Now we have access to the babble library from within our app, the next
stage is to start a babble network. We will start with a single node.
But before we can start babble we need to add some UI elements to allow
us to interact with our babble node.

Currently our application launches the activity \texttt{MainActivity}
which calls the key pair generation code in it's \texttt{onCreate}
method.

In the Sample App \footnote{The sample app is part of the
  \texttt{babble-android} library and is available from the
  \href{https://github.com/mosaicnetworks/babble-android}{GitHub repo}}
that we are working towards, the MainActivity Screen presents the user
with a choice of ``\textbf{New}'' or ``\textbf{Join}''. \textbf{New}
starts a new babble network with your device as the sole peer.
\textbf{Join} lets you specify the address of an existing network, pull
down the configuration for that network and request to join it.

As \textbf{New} is standalone functionality, and \textbf{Join} requires
\textbf{New} be implemented to function, we will implement \textbf{New}
first.

\hypertarget{main-activity}{%
\subsubsection{Main Activity}\label{main-activity}}

First up we will amend \texttt{MainActivity.java}. replace all of the
code with the following:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ androidx.appcompat.app.AppCompatActivity;}

\KeywordTok{import}\ImportTok{ android.content.Intent;}
\KeywordTok{import}\ImportTok{ android.os.Bundle;}

\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.KeyPair;}


\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.configure.BaseConfigActivity;}
\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.BabbleService;}


\KeywordTok{import}\ImportTok{ android.util.Log;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity }\KeywordTok{extends}\NormalTok{ BaseConfigActivity \{}
    
    \AttributeTok{@Override}
    \KeywordTok{public}\NormalTok{ BabbleService }\FunctionTok{getBabbleService}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ MessagingService.}\FunctionTok{getInstance}\NormalTok{();}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onJoined}\NormalTok{(}\BuiltInTok{String}\NormalTok{ moniker) \{}
        \CommentTok{// DO nothing for now  }
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onStartedNew}\NormalTok{(}\BuiltInTok{String}\NormalTok{ moniker) \{}
\NormalTok{        Intent intent = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{(}\KeywordTok{this}\NormalTok{, ChatActivity.}\FunctionTok{class}\NormalTok{);}
\NormalTok{        intent.}\FunctionTok{putExtra}\NormalTok{(}\StringTok{"MONIKER"}\NormalTok{, moniker);}
        \FunctionTok{startActivity}\NormalTok{(intent);}
\NormalTok{    \}}
    
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

We have removed our key generation in the onCreate method. Instead
\texttt{MainActivity} now extends \texttt{BaseConfigActivity}. The
\texttt{BaseConfigActivity} provides screens to create \textbf{New} and
to \textbf{Join} networks. We just need to define the callback event
handlers for each case. The further processing is identical in both
cases - both result in your babble node being started and in a babble
network -- the only difference is the number of nodes.

If you want more control over the network joining screens, the branches
with 0.2.1 suffices in the github repo have a worked version using
activities external to the \texttt{babble-android} library.

Add the line below as the first line of the class, we will use this
later to identified log messages from our app. :

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{public} \KeywordTok{class}\NormalTok{ MainActivity }\KeywordTok{extends}\NormalTok{ AppCompatActivity \{}

    \KeywordTok{public} \DataTypeTok{static} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ TAG = }\StringTok{"FIRST-BABBLE-APP"}\NormalTok{;}
\end{Highlighting}
\end{Shaded}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\pagebreak

\hypertarget{appstate.java}{%
\subsubsection{AppState.java}\label{appstate.java}}

Copy the source below into place in the same folder as
\texttt{MainActivity.java}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ com.google.gson.JsonSyntaxException;}

\KeywordTok{import}\ImportTok{ java.nio.charset.StandardCharsets;}
\KeywordTok{import}\ImportTok{ java.util.ArrayList;}
\KeywordTok{import}\ImportTok{ java.util.HashMap;}
\KeywordTok{import}\ImportTok{ java.util.List;}
\KeywordTok{import}\ImportTok{ java.util.Map;}

\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.BabbleState;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ AppState }\KeywordTok{implements}\NormalTok{ BabbleState \{}

    \KeywordTok{private} \DataTypeTok{byte}\NormalTok{[] mStateHash = }\KeywordTok{new} \DataTypeTok{byte}\NormalTok{[}\DecValTok{0}\NormalTok{];}
    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{Map}\NormalTok{<}\BuiltInTok{Integer}\NormalTok{, BabbleTx> mState = }\KeywordTok{new} \BuiltInTok{HashMap}\NormalTok{<>();}
    \KeywordTok{private} \BuiltInTok{Integer}\NormalTok{ mNextIndex = }\DecValTok{0}\NormalTok{;}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{applyTransactions}\NormalTok{(}\DataTypeTok{byte}\NormalTok{[][] transactions) \{}
        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{byte}\NormalTok{[] rawTx:transactions) \{}
            \BuiltInTok{String}\NormalTok{ tx = }\KeywordTok{new} \BuiltInTok{String}\NormalTok{(rawTx, StandardCharsets.}\FunctionTok{UTF_8}\NormalTok{);}

\NormalTok{            BabbleTx babbleTx;}
            \KeywordTok{try}\NormalTok{ \{}
\NormalTok{                babbleTx = BabbleTx.}\FunctionTok{fromJson}\NormalTok{(tx);}
\NormalTok{            \} }\KeywordTok{catch}\NormalTok{ (JsonSyntaxException ex) \{}
                \CommentTok{//skip any malformed transactions}
                \KeywordTok{continue}\NormalTok{;}
\NormalTok{            \}}

\NormalTok{            mState.}\FunctionTok{put}\NormalTok{(mNextIndex, babbleTx);}
\NormalTok{            mNextIndex++;}
\NormalTok{        \}}

        \FunctionTok{updateStateHash}\NormalTok{();}
        \KeywordTok{return}\NormalTok{ mStateHash;}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{reset}\NormalTok{() \{}
\NormalTok{        mState.}\FunctionTok{clear}\NormalTok{();}
\NormalTok{        mNextIndex = }\DecValTok{0}\NormalTok{;}
\NormalTok{    \}}

    \KeywordTok{public} \BuiltInTok{List}\NormalTok{<Message> }\FunctionTok{getMessagesFromIndex}\NormalTok{(}\BuiltInTok{Integer}\NormalTok{ index) \{}

        \KeywordTok{if}\NormalTok{ (index<}\DecValTok{0}\NormalTok{) \{}
            \KeywordTok{throw} \KeywordTok{new} \BuiltInTok{IllegalArgumentException}\NormalTok{(}\StringTok{"Index cannot be less than 0"}\NormalTok{);}
\NormalTok{        \}}

        \KeywordTok{if}\NormalTok{ (index >= mNextIndex) \{}
            \KeywordTok{return} \KeywordTok{new} \BuiltInTok{ArrayList}\NormalTok{<>();}
\NormalTok{        \}}

        \BuiltInTok{Integer}\NormalTok{ numMessages = mNextIndex - index;}

        \BuiltInTok{List}\NormalTok{<Message> messages = }\KeywordTok{new} \BuiltInTok{ArrayList}\NormalTok{<>(numMessages);}

        \KeywordTok{for}\NormalTok{ (}\DataTypeTok{int}\NormalTok{ i = }\DecValTok{0}\NormalTok{; i < numMessages; i++) \{}
\NormalTok{            messages.}\FunctionTok{add}\NormalTok{(Message.}\FunctionTok{fromBabbleTx}\NormalTok{(mState.}\FunctionTok{get}\NormalTok{(index + i)));}
\NormalTok{        \}}

        \KeywordTok{return}\NormalTok{ messages;}
\NormalTok{    \}}

    \KeywordTok{private} \DataTypeTok{void} \FunctionTok{updateStateHash}\NormalTok{() \{}
        \CommentTok{//}\AlertTok{TODO}\CommentTok{: implement this}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{babbletx.java}{%
\subsubsection{BabbleTx.java}\label{babbletx.java}}

Copy the source below into place in the same folder as
\texttt{MainActivity.java}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ com.google.gson.Gson;}
\KeywordTok{import}\ImportTok{ com.google.gson.annotations.SerializedName;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ BabbleTx }\KeywordTok{implements}\NormalTok{ io.}\FunctionTok{mosaicnetworks}\NormalTok{.}\FunctionTok{babble}\NormalTok{.}\FunctionTok{node}\NormalTok{.}\FunctionTok{BabbleTx}\NormalTok{ \{}

    \KeywordTok{private} \DataTypeTok{final} \DataTypeTok{static}\NormalTok{ Gson gson = }\KeywordTok{new} \FunctionTok{Gson}\NormalTok{();}

    \AttributeTok{@SerializedName}\NormalTok{(}\StringTok{"from"}\NormalTok{)}
    \KeywordTok{public} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ from;}

    \AttributeTok{@SerializedName}\NormalTok{(}\StringTok{"text"}\NormalTok{)}
    \KeywordTok{public} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ text;}

    \KeywordTok{public} \FunctionTok{BabbleTx}\NormalTok{(}\BuiltInTok{String}\NormalTok{ from, }\BuiltInTok{String}\NormalTok{ text) \{}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{from}\NormalTok{ = from;}
        \KeywordTok{this}\NormalTok{.}\FunctionTok{text}\NormalTok{ = text;}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{static}\NormalTok{ BabbleTx }\FunctionTok{fromJson}\NormalTok{(}\BuiltInTok{String}\NormalTok{ txJson) \{}
        \KeywordTok{return}\NormalTok{ gson.}\FunctionTok{fromJson}\NormalTok{(txJson, BabbleTx.}\FunctionTok{class}\NormalTok{);}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{byte}\NormalTok{[] }\FunctionTok{toBytes}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ gson.}\FunctionTok{toJson}\NormalTok{(}\KeywordTok{this}\NormalTok{).}\FunctionTok{getBytes}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{message.java}{%
\subsubsection{Message.java}\label{message.java}}

Copy the source below into place in the same folder as
\texttt{MainActivity.java}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.commons.models.IMessage;}
\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.commons.models.IUser;}

\KeywordTok{import}\ImportTok{ java.util.Date;}

\KeywordTok{public} \DataTypeTok{final} \KeywordTok{class}\NormalTok{ Message }\KeywordTok{implements}\NormalTok{ IMessage \{}

    \KeywordTok{public} \DataTypeTok{final} \DataTypeTok{static} \KeywordTok{class}\NormalTok{ Author }\KeywordTok{implements}\NormalTok{ IUser \{}

        \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ mName;}

        \KeywordTok{public} \FunctionTok{Author}\NormalTok{(}\BuiltInTok{String}\NormalTok{ name) \{}
\NormalTok{            mName = name;}
\NormalTok{        \}}

        \AttributeTok{@Override}
        \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getId}\NormalTok{() \{}
            \KeywordTok{return}\NormalTok{ mName;}
\NormalTok{        \}}

        \AttributeTok{@Override}
        \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getName}\NormalTok{() \{}
            \KeywordTok{return}\NormalTok{ mName;}
\NormalTok{        \}}

        \AttributeTok{@Override}
        \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getAvatar}\NormalTok{() \{}
            \KeywordTok{return} \KeywordTok{null}\NormalTok{;}
\NormalTok{        \}}
\NormalTok{    \}}

    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ mText;}
    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{String}\NormalTok{ mAuthor;}
    \KeywordTok{private} \DataTypeTok{final} \BuiltInTok{Date}\NormalTok{ mDate;}

    \KeywordTok{public} \FunctionTok{Message}\NormalTok{(}\BuiltInTok{String}\NormalTok{ text, }\BuiltInTok{String}\NormalTok{ author) \{}
\NormalTok{        mText = text;}
\NormalTok{        mAuthor = author;}
\NormalTok{        mDate = }\KeywordTok{new} \BuiltInTok{Date}\NormalTok{();}
\NormalTok{    \}}

    \KeywordTok{public} \DataTypeTok{static}\NormalTok{ Message }\FunctionTok{fromBabbleTx}\NormalTok{(BabbleTx babbleTx) \{}
        \KeywordTok{return} \KeywordTok{new} \FunctionTok{Message}\NormalTok{(babbleTx.}\FunctionTok{text}\NormalTok{, babbleTx.}\FunctionTok{from}\NormalTok{);}
\NormalTok{    \}}

    \KeywordTok{public}\NormalTok{ BabbleTx }\FunctionTok{toBabbleTx}\NormalTok{() \{}
        \KeywordTok{return} \KeywordTok{new} \FunctionTok{BabbleTx}\NormalTok{(mAuthor, mText);}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getId}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ mAuthor;}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \BuiltInTok{String} \FunctionTok{getText}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ mText;}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public}\NormalTok{ Author }\FunctionTok{getUser}\NormalTok{() \{}
        \KeywordTok{return} \KeywordTok{new} \FunctionTok{Author}\NormalTok{(mAuthor);}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \BuiltInTok{Date} \FunctionTok{getCreatedAt}\NormalTok{() \{}
        \KeywordTok{return}\NormalTok{ mDate;}
\NormalTok{    \}}

\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

You will note the section below introduces an external dependency:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.commons.models.IMessage;}
\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.commons.models.IUser;}
\end{Highlighting}
\end{Shaded}

Add the lines below to the app \texttt{build.gradle} file dependencies
section, and click Sync Now on the pop up bar:

\begin{verbatim}
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.github.stfalcon:chatkit:0.3.3'
\end{verbatim}

\hypertarget{messagingservice.java}{%
\subsubsection{MessagingService.java}\label{messagingservice.java}}

Copy the source below into place in the same folder as
\texttt{MainActivity.java}:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.BabbleService;}

\KeywordTok{public} \DataTypeTok{final} \KeywordTok{class}\NormalTok{ MessagingService }\KeywordTok{extends}\NormalTok{ BabbleService<AppState> \{}

    \KeywordTok{private} \DataTypeTok{static}\NormalTok{ MessagingService INSTANCE;}

    \KeywordTok{public} \DataTypeTok{static}\NormalTok{ MessagingService }\FunctionTok{getInstance}\NormalTok{() \{}
        \KeywordTok{if}\NormalTok{ (INSTANCE==}\KeywordTok{null}\NormalTok{) \{}
\NormalTok{            INSTANCE = }\KeywordTok{new} \FunctionTok{MessagingService}\NormalTok{();}
\NormalTok{        \}}

        \KeywordTok{return}\NormalTok{ INSTANCE;}
\NormalTok{    \}}

    \KeywordTok{private} \FunctionTok{MessagingService}\NormalTok{() \{}
        \KeywordTok{super}\NormalTok{(}\KeywordTok{new} \FunctionTok{AppState}\NormalTok{());}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{chat-activity}{%
\subsubsection{Chat Activity}\label{chat-activity}}

Create a new empty activity, \texttt{ChatActivity}. We will not add any
functionality to it at this point, we just need it to exist as it is
referenced in \texttt{MainActivity}.

\hypertarget{running-babble}{%
\subsubsection{Running Babble}\label{running-babble}}

And finally after all of that cut and paste, we have a working instance
of babble --- albeit with at least one major drawback --- it has no UI
and no way to access it.

If you start the app through Android Studio, and look at the logcat
output (filtered to just our app), after pressing the New button,
entering a Moniker and pressing the Join button, you should see
something like below:

\includegraphics{./screenshots/logcat_babble.png}

The lines of red text are the lines of interest, stripping out the date
and other prefixes gives something like:

\begin{verbatim}
msg="Creating InmemStore" prefix=babble
msg=PARTICIPANTS genesis_peers=1 id=2193277640 moniker=Jon peers=1 prefix=babble
msg="Start Listening" prefix=babble
msg="Node belongs to PeerSet" prefix=babble
msg="FastSync not enabled => Babbling" prefix=babble
msg=SetHeadAndSeq core.Head= core.Seq=-1 prefix=babble
msg=runasync gossip=true prefix=babble
msg="Run loop" prefix=babble state=Babbling
msg=BABBLING prefix=babble
\end{verbatim}

The key item is the ``\textbf{state=Babbling}'' line, which denotes that
Babble is up and running.

\hypertarget{some-explanations}{%
\subsection{Some Explanations}\label{some-explanations}}

We have just added a lot of code, which is all co-dependent. Now we have
a babble invocation in place, we can pause to explain what just happened
there.

The configuration of a babble node is handled by the
\texttt{BaseConfigActivity} class from whom \texttt{MainActivity}
inherits. We just need to wire in the \texttt{ChatActivity} to take over
once we have a Babble network.

We define a MessagingService using the \texttt{getBabbleService()}
function. This boilerplate class wraps BabbleService from the
babble-android library.

This project at this stage is available from github from
\href{https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage2}{here}
\footnote{This code is the stage2 branch at
  https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage2}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\hypertarget{interacting-with-babble}{%
\subsection{Interacting with Babble}\label{interacting-with-babble}}

The next stage is to make Babble usable. To do that we need to work on
the \texttt{ChatActivity} so it sends and receives messages from Babble.

First up we need a UI. We are going to use
\href{https://github.com/stfalcon-studio/ChatKit}{ChatKit} rather than
reinvent the wheel.

\hypertarget{activity_chat.xml}{%
\subsubsection{activity\_chat.xml}\label{activity_chat.xml}}

We can then add the layout to \texttt{res/layout/activity\_chat.xml} ---
replace all the contents with the code below:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{<?xml}\NormalTok{ version="1.0" encoding="utf-8"}\KeywordTok{?>}
\KeywordTok{<RelativeLayout}
\OtherTok{    xmlns:android=}\StringTok{"http://schemas.android.com/apk/res/android"}
\OtherTok{    xmlns:app=}\StringTok{"http://schemas.android.com/apk/res-auto"}
\OtherTok{    xmlns:tools=}\StringTok{"http://schemas.android.com/tools"}
\OtherTok{    android:layout_width=}\StringTok{"match_parent"}
\OtherTok{    android:layout_height=}\StringTok{"match_parent"}
\OtherTok{    android:background=}\StringTok{"@color/white"}
\OtherTok{    tools:context=}\StringTok{".ChatActivity"}\KeywordTok{>}

    \KeywordTok{<com.stfalcon.chatkit.messages.MessagesList}
\OtherTok{        android:id=}\StringTok{"@+id/messagesList"}
\OtherTok{        android:layout_width=}\StringTok{"match_parent"}
\OtherTok{        android:layout_height=}\StringTok{"match_parent"}
\OtherTok{        android:layout_above=}\StringTok{"@+id/input"}\KeywordTok{/>}

    \KeywordTok{<View}
\OtherTok{        android:layout_width=}\StringTok{"match_parent"}
\OtherTok{        android:layout_height=}\StringTok{"1dp"}
\OtherTok{        android:layout_above=}\StringTok{"@+id/input"}
\OtherTok{        android:layout_marginLeft=}\StringTok{"16dp"}
\OtherTok{        android:layout_marginRight=}\StringTok{"16dp"}
\OtherTok{        android:background=}\StringTok{"@color/gray_light"}\KeywordTok{/>}

    \KeywordTok{<com.stfalcon.chatkit.messages.MessageInput}
\OtherTok{        android:id=}\StringTok{"@+id/input"}
\OtherTok{        android:layout_width=}\StringTok{"match_parent"}
\OtherTok{        android:layout_height=}\StringTok{"wrap_content"}
\OtherTok{        android:layout_alignParentBottom=}\StringTok{"true"}
\OtherTok{        app:inputHint=}\StringTok{"@string/hint_enter_a_message"}
\OtherTok{        app:showAttachmentButton=}\StringTok{"true"}\KeywordTok{/>}

\KeywordTok{</RelativeLayout>}
\end{Highlighting}
\end{Shaded}

The layout here is a fairly standard chat layout a message entry section
at the bottom of the screen and a message display above it.

\hypertarget{colors.xml}{%
\subsubsection{colors.xml}\label{colors.xml}}

We need to the add the following to \texttt{res/values/colors.xml} as it
is used in the code changes above.

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<color}\OtherTok{ name=}\StringTok{"gray_light"}\KeywordTok{>}\NormalTok{#e8e8e8}\KeywordTok{</color>}    
\end{Highlighting}
\end{Shaded}

\hypertarget{chatactivity.java}{%
\subsubsection{ChatActivity.java}\label{chatactivity.java}}

Replace all of the file \texttt{ChatActivity.java} with the code below:

\begin{Shaded}
\begin{Highlighting}[]
\KeywordTok{package}\ImportTok{ io.mosaicnetworks.myfirstapp;}

\KeywordTok{import}\ImportTok{ android.content.Intent;}
\KeywordTok{import}\ImportTok{ android.os.Bundle;}
\KeywordTok{import}\ImportTok{ android.widget.Toast;}

\KeywordTok{import}\ImportTok{ androidx.appcompat.app.AppCompatActivity;}

\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.messages.MessageInput;}
\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.messages.MessagesList;}
\KeywordTok{import}\ImportTok{ com.stfalcon.chatkit.messages.MessagesListAdapter;}

\KeywordTok{import}\ImportTok{ java.util.List;}

\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.BabbleService;}
\KeywordTok{import}\ImportTok{ io.mosaicnetworks.babble.node.ServiceObserver;}

\KeywordTok{public} \KeywordTok{class}\NormalTok{ ChatActivity }\KeywordTok{extends}\NormalTok{ AppCompatActivity }\KeywordTok{implements}\NormalTok{ ServiceObserver \{}

    \KeywordTok{private}\NormalTok{ MessagesListAdapter<Message> mAdapter;}
    \KeywordTok{private} \BuiltInTok{String}\NormalTok{ mMoniker;}
    \KeywordTok{private} \DataTypeTok{final}\NormalTok{ MessagingService mMessagingService = }
\NormalTok{                                            MessagingService.}\FunctionTok{getInstance}\NormalTok{();}
    \KeywordTok{private} \BuiltInTok{Integer}\NormalTok{ mMessageIndex = }\DecValTok{0}\NormalTok{;}

    \AttributeTok{@Override}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onCreate}\NormalTok{(Bundle savedInstanceState) \{}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onCreate}\NormalTok{(savedInstanceState);}
        \FunctionTok{setContentView}\NormalTok{(R.}\FunctionTok{layout}\NormalTok{.}\FunctionTok{activity_chat}\NormalTok{);}

\NormalTok{        Intent intent = }\FunctionTok{getIntent}\NormalTok{();}
\NormalTok{        mMoniker = intent.}\FunctionTok{getStringExtra}\NormalTok{(}\StringTok{"MONIKER"}\NormalTok{);}

        \FunctionTok{initialiseAdapter}\NormalTok{();}
\NormalTok{        mMessagingService.}\FunctionTok{registerObserver}\NormalTok{(}\KeywordTok{this}\NormalTok{);}

        \KeywordTok{if}\NormalTok{ (mMessagingService.}\FunctionTok{getState}\NormalTok{()!= }
\NormalTok{                        BabbleService.}\FunctionTok{State}\NormalTok{.}\FunctionTok{RUNNING_WITH_DISCOVERY}\NormalTok{) \{}
\NormalTok{            Toast.}\FunctionTok{makeText}\NormalTok{(}\KeywordTok{this}\NormalTok{, }
                        \StringTok{"Unable to advertise peers"}\NormalTok{, }
\NormalTok{                        Toast.}\FunctionTok{LENGTH_LONG}\NormalTok{).}\FunctionTok{show}\NormalTok{();}
\NormalTok{        \}}
\NormalTok{    \}}

    \KeywordTok{private} \DataTypeTok{void} \FunctionTok{initialiseAdapter}\NormalTok{() \{}
\NormalTok{        MessagesList mMessagesList = }\FunctionTok{findViewById}\NormalTok{(R.}\FunctionTok{id}\NormalTok{.}\FunctionTok{messagesList}\NormalTok{);}

\NormalTok{        mAdapter = }\KeywordTok{new}\NormalTok{ MessagesListAdapter<>(mMoniker, }\KeywordTok{null}\NormalTok{);}
\NormalTok{        mMessagesList.}\FunctionTok{setAdapter}\NormalTok{(mAdapter);}

\NormalTok{        MessageInput input = }\FunctionTok{findViewById}\NormalTok{(R.}\FunctionTok{id}\NormalTok{.}\FunctionTok{input}\NormalTok{);}

\NormalTok{        input.}\FunctionTok{setInputListener}\NormalTok{(}\KeywordTok{new}\NormalTok{ MessageInput.}\FunctionTok{InputListener}\NormalTok{() \{}
            \AttributeTok{@Override}
            \KeywordTok{public} \DataTypeTok{boolean} \FunctionTok{onSubmit}\NormalTok{(}\BuiltInTok{CharSequence}\NormalTok{ input) \{}
\NormalTok{                mMessagingService.}\FunctionTok{submitTx}\NormalTok{(}
                    \KeywordTok{new} \FunctionTok{Message}\NormalTok{(input.}\FunctionTok{toString}\NormalTok{(), mMoniker).}\FunctionTok{toBabbleTx}\NormalTok{());}
                \KeywordTok{return} \KeywordTok{true}\NormalTok{;}
\NormalTok{            \}}
\NormalTok{        \});}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{stateUpdated}\NormalTok{() \{}

        \DataTypeTok{final} \BuiltInTok{List}\NormalTok{<Message> newMessages = }
\NormalTok{                mMessagingService.}\FunctionTok{state}\NormalTok{.}\FunctionTok{getMessagesFromIndex}\NormalTok{(mMessageIndex);}

        \FunctionTok{runOnUiThread}\NormalTok{(}\KeywordTok{new} \BuiltInTok{Runnable}\NormalTok{() \{}
            \AttributeTok{@Override}
            \KeywordTok{public} \DataTypeTok{void} \FunctionTok{run}\NormalTok{() \{}
                \KeywordTok{for}\NormalTok{ (Message message : newMessages ) \{}
\NormalTok{                    mAdapter.}\FunctionTok{addToStart}\NormalTok{(message, }\KeywordTok{true}\NormalTok{);}
\NormalTok{                \}}
\NormalTok{            \}}
\NormalTok{        \});}

\NormalTok{        mMessageIndex = mMessageIndex + newMessages.}\FunctionTok{size}\NormalTok{();}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onBackPressed}\NormalTok{() \{}
\NormalTok{        mMessagingService.}\FunctionTok{leave}\NormalTok{(}\KeywordTok{null}\NormalTok{);}
        \KeywordTok{super}\NormalTok{.}\FunctionTok{onBackPressed}\NormalTok{();}
\NormalTok{    \}}

    \AttributeTok{@Override}
    \KeywordTok{protected} \DataTypeTok{void} \FunctionTok{onDestroy}\NormalTok{() \{}
\NormalTok{        mMessagingService.}\FunctionTok{removeObserver}\NormalTok{(}\KeywordTok{this}\NormalTok{);}

        \KeywordTok{super}\NormalTok{.}\FunctionTok{onDestroy}\NormalTok{();}
\NormalTok{    \}}
\NormalTok{\}}
\end{Highlighting}
\end{Shaded}

\hypertarget{strings.xml}{%
\subsubsection{strings.xml}\label{strings.xml}}

We need to the add the following to \texttt{res/values/strings.xml} as
they are used in the code changes above.

\begin{Shaded}
\begin{Highlighting}[]
    \KeywordTok{<string}\OtherTok{ name=}\StringTok{"hint_enter_a_message"}\KeywordTok{>}\NormalTok{Enter a message}\KeywordTok{</string>}
    
\end{Highlighting}
\end{Shaded}

\hypertarget{build-run-and-test}{%
\subsubsection{Build, Run and Test}\label{build-run-and-test}}

Build your app and run it. You should now be able to start a chat with
yourself and send messages to yourself as below:

\includegraphics[width=0.5\textwidth,height=\textheight]{./screenshots/first_chat.png}

This project at this stage is available from github from
\href{https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage3}{here}
\footnote{This code is the stage3 branch at
  https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage3}

\begin{center}\rule{0.5\linewidth}{\linethickness}\end{center}

\pagebreak

\hypertarget{joining}{%
\subsection{Joining}\label{joining}}

Thus far, we have been dealing with a single node, which kind of misses
the whole point of having a blockchain. So this section remedies this.
We will add a new button the MainActivity to Join an existing
blockchain. This will require discovering the network - we will just
enter an IP address for the moment - although more complex schemes would
be used in a production environment.

In the previous version (0.2.1) of Babble-Android, the explanation for
joining was over 400 lines of markdown text (plus screenshots). As of
0.2.2, it is just to add 3 lines of code (shown in context below) to
\texttt{MainActivity.java}

\begin{Shaded}
\begin{Highlighting}[]
    \AttributeTok{@Override}
    \KeywordTok{public} \DataTypeTok{void} \FunctionTok{onJoined}\NormalTok{(}\BuiltInTok{String}\NormalTok{ moniker) \{}
\NormalTok{        Intent intent = }\KeywordTok{new} \FunctionTok{Intent}\NormalTok{(}\KeywordTok{this}\NormalTok{, ChatActivity.}\FunctionTok{class}\NormalTok{);}
\NormalTok{        intent.}\FunctionTok{putExtra}\NormalTok{(}\StringTok{"MONIKER"}\NormalTok{, moniker);}
        \FunctionTok{startActivity}\NormalTok{(intent);}
\NormalTok{    \}}
\end{Highlighting}
\end{Shaded}

\hypertarget{build-run-and-test-1}{%
\subsubsection{Build, Run and Test}\label{build-run-and-test-1}}

Build your app and run it on 2 devices. You should now be able to start
a chat on one and join with the other:

\includegraphics[width=0.35\textwidth,height=\textheight]{./screenshots/stage_4.png}
\includegraphics[width=0.6\textwidth,height=\textheight]{./screenshots/stage_4_tab.png}

This project at this stage is available from github from
\href{https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage4}{here}
\footnote{This code is the stage4 branch at
  https://github.com/mosaicnetworks/babble-android-tutorial/tree/stage4}
