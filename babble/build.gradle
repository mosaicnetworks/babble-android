/*
 * MIT License
 *
 * Copyright (c) 2018- Mosaic Networks
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: io.mosaicnetworks.getbabblecore.GetBabbleCorePlugin

//##################################################################################################
// babble core configuration

// def babbleCoreVersion = "0.8.0"
// def repository = "https://github.com/mosaicnetworks/babble/releases/download"
// def method = "https"

def babbleCoreVersion = "develop_d8a2755aa264956ca095ff4dd5cfc9bf31fabea6"
def repository = (System.getenv('GOPATH') == null ? System.properties['user.home'] + "/go" : System.getenv('GOPATH'))  + "/src/github.com/mosaicnetworks/babble/build/distmobile"
def method = "file"

//##################################################################################################

def localRepository = "$projectDir/libs/babble-core"
def babbleJarDependency = "$localRepository/$babbleCoreVersion/classes.jar"


def getGitHashShort = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse',  'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}


android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21       // nsdServiceInfo.getAttributes requires API 21
        targetSdkVersion 29
        versionCode 15
        versionName "0.5.0"
        buildConfigField "String", "GitHash", "\"${getGitHash()}\""
        buildConfigField "String", "GitHashShort", "\"${getGitHashShort()}\""
        buildConfigField "String", "GitBranch", "\"${getGitBranch()}\""
        buildConfigField "String", "BabbleVersion", "\"${babbleCoreVersion}\""
        buildConfigField "String", "BabbleRepo", "\"${repository}\""
        buildConfigField "String", "BabbleMethod", "\"${method}\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ["libs/babble-core/$babbleCoreVersion/jni"]
        }
    }

     getBabbleCore {
        version = babbleCoreVersion
        remoteRepo = repository
        localRepo = "babble/libs/babble-core"
        protocol = method
    }

}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

dependencies {
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    implementation 'com.android.volley:volley:1.1.1'
    implementation files(babbleJarDependency)
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'com.moandjiezana.toml:toml4j:0.7.2'
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.guava:guava:28.2-android'
    implementation 'com.google.android.material:material:1.2.0-alpha05'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
}

artifacts {
    archives sourcesJar
}

version '0.5.0'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty('user')
    key = properties.getProperty('apiKey')
    publications = ['MyPublication']
    configurations = ['archives']
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = false //[Default: false] Whether to override version artifacts already published

    pkg {
        repo = 'maven'
        userOrg = 'mosaicnetworks'
        name = 'io.mosaicnetworks:babble'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/mosaicnetworks/babble-android.git'
        version {
            name = this.version
            released  = new Date()
            vcsTag = this.version
        }
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

publishing {
    publications {
        MyPublication(MavenPublication) {

            artifact sourcesJar
            artifact javadocJar

            pom {
                packaging = "aar"
            }

            pom.withXml {

                def dependenciesNode = asNode().getAt('dependencies')[0] ?: asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }


        }
    }
}







